import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.github.johnrengelman.shadow" version "1.2.3"
    id "com.jfrog.bintray" version "1.7.1"
    id "com.github.hierynomus.license" version "0.13.1"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'jacoco'

version = '0.15'
sourceCompatibility = 1.8

project.group = 'ubicrypt'
mainClassName = 'ubicrypt.UbiCrypt'

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'ubicrypt'
            artifactId 'ubicrypt'
            version "${version}"
        }
    }
}
bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'maven'
        name = 'ubicrypt'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/gfrison/ubicrypt/ubicrypt.git'
    }
}



jar {
    manifest {
        attributes("Implementation-Title": "UbiCrypt",
                "Implementation-Version": version)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://repo.spring.io/libs-release' }
    maven { url "https://repo.spring.io/libs-snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://dl.bintray.com/ubicrypt/maven" }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url "https://oss.sonatype.org/content/groups/public" }
    jcenter()
}


ext {
    jacksonVersion = '2.8.3'
    springVersion = '1.3.8.RELEASE'
    awsVersion = '1.11.49'
    gdriveVersion = '1.22.0'
}



dependencies {
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile "org.springframework.boot:spring-boot:$springVersion"
    compile "org.springframework.boot:spring-boot-autoconfigure:$springVersion"
    compile "org.springframework.boot:spring-boot-starter-log4j:$springVersion"
    compile("org.springframework.boot:spring-boot-starter:$springVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compile "org.springframework.boot:spring-boot-configuration-processor:$springVersion"
    testCompile "org.springframework.boot:spring-boot-starter-test:$springVersion"

    compile 'org.bouncycastle:bcpg-jdk15on:1.55'
    compile 'com.google.guava:guava:19.0'
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:$jacksonVersion"


    compile 'io.reactivex:rxjava:1.2.0'
    compile 'javax.inject:javax.inject:1'
    compile 'commons-net:commons-net:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-lang3:3.4'

    // Reactor Core
    compile 'io.projectreactor:reactor-core:2.0.7.RELEASE'

    compile 'org.controlsfx:controlsfx:8.40.11'
    compile 'de.jensd:fontawesomefx-commons:8.13'
    //AWS
    compile "com.amazonaws:aws-java-sdk-s3:$awsVersion"
    compile "com.thoughtworks.xstream:xstream:1.4.9"
    //google drive
    compile 'com.google.apis:google-api-services-drive:v3-rev52-1.22.0'
    compile "com.google.http-client:google-http-client:$gdriveVersion"
    compile "com.google.http-client:google-http-client-jackson2:$gdriveVersion"
    compile "com.google.oauth-client:google-oauth-client-jetty:$gdriveVersion"





    testCompile 'junit:junit:4.11'
    testCompile 'org.assertj:assertj-core:3.5.2'
    testCompile 'org.apache.ftpserver:ftpserver:1.0.6'
    testCompile 'org.apache.ftpserver:ftpserver-core:1.0.6'

}


task packageNative(type: Exec, dependsOn: shadowJar) {
    def updatefxVersion = 1

    if (Os.isFamily(Os.FAMILY_MAC))
        executable './package/mac.sh'
    else if (Os.isFamily(Os.FAMILY_UNIX))
        executable './package/linux.sh'
    else if (Os.isFamily(Os.FAMILY_WINDOWS))
        executable './package/windows.ps1'
    else
        throw new GradleException("Unsupported OS: " + System.properties['os.name'])

    args updatefxVersion, shadowJar.archivePath, mainClassName
}

license {
    header = file('lic-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    includes(["**/*.java", "**/*.properties"])
    ignoreFailures = true
}



